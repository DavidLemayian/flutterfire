// Copyright 2023, the Chromium project authors.  Please see the AUTHORS file
// for details. All rights reserved. Use of this source code is governed by a
// BSD-style license that can be found in the LICENSE file.
// Autogenerated from Pigeon (v10.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#undef _HAS_EXCEPTIONS

#include "messages.g.h"

#include <flutter/basic_message_channel.h>
#include <flutter/binary_messenger.h>
#include <flutter/encodable_value.h>
#include <flutter/standard_message_codec.h>

#include <map>
#include <optional>
#include <string>

namespace firebase_auth_windows {
using flutter::BasicMessageChannel;
using flutter::CustomEncodableValue;
using flutter::EncodableList;
using flutter::EncodableMap;
using flutter::EncodableValue;

// PigeonFirebaseApp

PigeonFirebaseApp::PigeonFirebaseApp(const std::string& app_name)
 : app_name_(app_name) {}

PigeonFirebaseApp::PigeonFirebaseApp(
  const std::string& app_name,
  const std::string* tenant_id)
 : app_name_(app_name),
    tenant_id_(tenant_id ? std::optional<std::string>(*tenant_id) : std::nullopt) {}

const std::string& PigeonFirebaseApp::app_name() const {
  return app_name_;
}

void PigeonFirebaseApp::set_app_name(std::string_view value_arg) {
  app_name_ = value_arg;
}


const std::string* PigeonFirebaseApp::tenant_id() const {
  return tenant_id_ ? &(*tenant_id_) : nullptr;
}

void PigeonFirebaseApp::set_tenant_id(const std::string_view* value_arg) {
  tenant_id_ = value_arg ? std::optional<std::string>(*value_arg) : std::nullopt;
}

void PigeonFirebaseApp::set_tenant_id(std::string_view value_arg) {
  tenant_id_ = value_arg;
}


EncodableList PigeonFirebaseApp::ToEncodableList() const {
  EncodableList list;
  list.reserve(2);
  list.push_back(EncodableValue(app_name_));
  list.push_back(tenant_id_ ? EncodableValue(*tenant_id_) : EncodableValue());
  return list;
}

PigeonFirebaseApp PigeonFirebaseApp::FromEncodableList(const EncodableList& list) {
  PigeonFirebaseApp decoded(
    std::get<std::string>(list[0]));
  auto& encodable_tenant_id = list[1];
  if (!encodable_tenant_id.IsNull()) {
    decoded.set_tenant_id(std::get<std::string>(encodable_tenant_id));
  }
  return decoded;
}


FirebaseAuthHostApiCodecSerializer::FirebaseAuthHostApiCodecSerializer() {}

EncodableValue FirebaseAuthHostApiCodecSerializer::ReadValueOfType(
  uint8_t type,
  flutter::ByteStreamReader* stream) const {
  switch (type) {
    case 128:
      return CustomEncodableValue(PigeonFirebaseApp::FromEncodableList(std::get<EncodableList>(ReadValue(stream))));
    default:
      return flutter::StandardCodecSerializer::ReadValueOfType(type, stream);
  }
}

void FirebaseAuthHostApiCodecSerializer::WriteValue(
  const EncodableValue& value,
  flutter::ByteStreamWriter* stream) const {
  if (const CustomEncodableValue* custom_value = std::get_if<CustomEncodableValue>(&value)) {
    if (custom_value->type() == typeid(PigeonFirebaseApp)) {
      stream->WriteByte(128);
      WriteValue(EncodableValue(std::any_cast<PigeonFirebaseApp>(*custom_value).ToEncodableList()), stream);
      return;
    }
  }
  flutter::StandardCodecSerializer::WriteValue(value, stream);
}

/// The codec used by FirebaseAuthHostApi.
const flutter::StandardMessageCodec& FirebaseAuthHostApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&FirebaseAuthHostApiCodecSerializer::GetInstance());
}

// Sets up an instance of `FirebaseAuthHostApi` to handle messages through the `binary_messenger`.
void FirebaseAuthHostApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  FirebaseAuthHostApi* api) {
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.FirebaseAuthHostApi.registerIdTokenListener", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_app_arg = args.at(0);
          if (encodable_app_arg.IsNull()) {
            reply(WrapError("app_arg unexpectedly null."));
            return;
          }
          const auto& app_arg = std::any_cast<const PigeonFirebaseApp&>(std::get<CustomEncodableValue>(encodable_app_arg));
          api->RegisterIdTokenListener(app_arg, [reply](ErrorOr<std::string>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.FirebaseAuthHostApi.registerAuthStateListener", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_app_arg = args.at(0);
          if (encodable_app_arg.IsNull()) {
            reply(WrapError("app_arg unexpectedly null."));
            return;
          }
          const auto& app_arg = std::any_cast<const PigeonFirebaseApp&>(std::get<CustomEncodableValue>(encodable_app_arg));
          api->RegisterAuthStateListener(app_arg, [reply](ErrorOr<std::string>&& output) {
            if (output.has_error()) {
              reply(WrapError(output.error()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue(std::move(output).TakeValue()));
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.FirebaseAuthHostApi.useEmulator", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_app_arg = args.at(0);
          if (encodable_app_arg.IsNull()) {
            reply(WrapError("app_arg unexpectedly null."));
            return;
          }
          const auto& app_arg = std::any_cast<const PigeonFirebaseApp&>(std::get<CustomEncodableValue>(encodable_app_arg));
          const auto& encodable_host_arg = args.at(1);
          if (encodable_host_arg.IsNull()) {
            reply(WrapError("host_arg unexpectedly null."));
            return;
          }
          const auto& host_arg = std::get<std::string>(encodable_host_arg);
          const auto& encodable_port_arg = args.at(2);
          if (encodable_port_arg.IsNull()) {
            reply(WrapError("port_arg unexpectedly null."));
            return;
          }
          const int64_t port_arg = encodable_port_arg.LongValue();
          api->UseEmulator(app_arg, host_arg, port_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
  {
    auto channel = std::make_unique<BasicMessageChannel<>>(binary_messenger, "dev.flutter.pigeon.FirebaseAuthHostApi.applyActionCode", &GetCodec());
    if (api != nullptr) {
      channel->SetMessageHandler([api](const EncodableValue& message, const flutter::MessageReply<EncodableValue>& reply) {
        try {
          const auto& args = std::get<EncodableList>(message);
          const auto& encodable_app_arg = args.at(0);
          if (encodable_app_arg.IsNull()) {
            reply(WrapError("app_arg unexpectedly null."));
            return;
          }
          const auto& app_arg = std::any_cast<const PigeonFirebaseApp&>(std::get<CustomEncodableValue>(encodable_app_arg));
          const auto& encodable_code_arg = args.at(1);
          if (encodable_code_arg.IsNull()) {
            reply(WrapError("code_arg unexpectedly null."));
            return;
          }
          const auto& code_arg = std::get<std::string>(encodable_code_arg);
          api->ApplyActionCode(app_arg, code_arg, [reply](std::optional<FlutterError>&& output) {
            if (output.has_value()) {
              reply(WrapError(output.value()));
              return;
            }
            EncodableList wrapped;
            wrapped.push_back(EncodableValue());
            reply(EncodableValue(std::move(wrapped)));
          });
        } catch (const std::exception& exception) {
          reply(WrapError(exception.what()));
        }
      });
    } else {
      channel->SetMessageHandler(nullptr);
    }
  }
}

EncodableValue FirebaseAuthHostApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue FirebaseAuthHostApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

/// The codec used by FirebaseAuthUserHostApi.
const flutter::StandardMessageCodec& FirebaseAuthUserHostApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&flutter::StandardCodecSerializer::GetInstance());
}

// Sets up an instance of `FirebaseAuthUserHostApi` to handle messages through the `binary_messenger`.
void FirebaseAuthUserHostApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  FirebaseAuthUserHostApi* api) {
}

EncodableValue FirebaseAuthUserHostApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue FirebaseAuthUserHostApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

/// The codec used by MultiFactorUserHostApi.
const flutter::StandardMessageCodec& MultiFactorUserHostApi::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&flutter::StandardCodecSerializer::GetInstance());
}

// Sets up an instance of `MultiFactorUserHostApi` to handle messages through the `binary_messenger`.
void MultiFactorUserHostApi::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  MultiFactorUserHostApi* api) {
}

EncodableValue MultiFactorUserHostApi::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue MultiFactorUserHostApi::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

/// The codec used by GenerateInterfaces.
const flutter::StandardMessageCodec& GenerateInterfaces::GetCodec() {
  return flutter::StandardMessageCodec::GetInstance(&flutter::StandardCodecSerializer::GetInstance());
}

// Sets up an instance of `GenerateInterfaces` to handle messages through the `binary_messenger`.
void GenerateInterfaces::SetUp(
  flutter::BinaryMessenger* binary_messenger,
  GenerateInterfaces* api) {
}

EncodableValue GenerateInterfaces::WrapError(std::string_view error_message) {
  return EncodableValue(EncodableList{
    EncodableValue(std::string(error_message)),
    EncodableValue("Error"),
    EncodableValue()
  });
}

EncodableValue GenerateInterfaces::WrapError(const FlutterError& error) {
  return EncodableValue(EncodableList{
    EncodableValue(error.code()),
    EncodableValue(error.message()),
    error.details()
  });
}

}  // namespace firebase_auth_windows
